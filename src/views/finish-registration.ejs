<div id="cls111">

<form id="FORM" autocomplete="off" action="/interaction/<%= uid %>/federated/finish-registration" method="post">
  <input hidden value="<%= serverData %>" id="SERVER-DATA"/>
  <input hidden value="<%= code %>" name="code"/>
  <input value="<%= uid %>" hidden id="UID"/>
  <input hidden id="METAMASK-NONCE" name="metamask_nonce"/>
  <input hidden id="METAMASK-SIGNATURE" name="metamask_signature"/>
  <input required type="text" name="username" placeholder="Enter username"/>
  <div id="INPUT-WRAPPER"></div>
</form>

<script src="https://cdn.ethers.io/lib/ethers-5.2.esm.min.js">
  let frontRespondedToServerError = false;
  const parentElement = document.getElementById("INPUT-WRAPPER");

  const errorUsername = document.createElement("div");

  const metamaskButton = document.createElement("button");
  const errorMetamask = document.createElement("div");
  errorMetamask.hidden = true;
  errorUsername.hidden = true;

  const serverData = JSON.parse(document.getElementById("SERVER-DATA").value);
  const error = serverData.error;
  if(!frontRespondedToServerError && error){ //server returning bad user input data
    if(error.field == 'username'){
      errorUsername.hidden = false;
      errorUsername.innerText = error.message;
    }
    if(error.field == 'metamask'){
      errorMetamask.hidden = false;
      errorMetamask.innerText = error.message;
    }
    frontRespondedToServerError = true;
  }

  metamaskButton.textContent = "Connect Metamask";

  metamaskButton.onclick = async () => {

    const uid = document.getElementById("UID").value;

    try{

      // Get the provider and signer from the browser window
      const provider = new ethers.providers.Web3Provider(window.ethereum);

      await provider.send("eth_requestAccounts", []);

      const signer = await provider.getSigner();

      const response = await fetch(`/interaction/${uid}/metamask/request-nonce`,  {
        method: "POST", // *GET, POST, PUT, DELETE, etc.
        mode: "cors", // no-cors, *cors, same-origin
        cache: "no-cache", // *default, no-cache, reload, force-cache, only-if-cached
        credentials: "same-origin", // include, *same-origin, omit
        headers: {
          "Content-Type": "application/json",
        },
        referrerPolicy: "no-referrer", // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url
      });

      const { nonce } = await response.json()

      const signature = await signer.signMessage(nonce);

      document.getElementById("METAMASK-NONCE").value = nonce;
      document.getElementById("METAMASK-SIGNATURE").value = signature;

      metamaskButton.textContent = 'Connected';
      metamaskButton.onclick = () => {}
    } catch {
      metamaskButton.textContent = 'Install Metamask';
    }
  }
  parentElement.appendChild(errorUsername);
  parentElement.appendChild(metamaskButton);
  parentElement.appendChild(errorMetamask);

  const submitButton = document.createElement("button");
  submitButton.innerText = "Submit";
  submitButton.onclick = () => {
    document.getElementById("FORM").submit();
  }

  parentElement.appendChild(submitButton);

  document.getElementById("cls111").appendChild(parentElement);

</script>

</div>